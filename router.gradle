ext {
    // baseDir 为公共依赖的模块
    // 插件会自动扫描相关源文件 自动合并并生成新的源文件放在 baseDir 模块中
    baseDir = "base"
}

/**
 * 扫描所有 AppRouterPath 文件 【 AppRouterPath 源文件由 router 编译时注解自动生成】
 * 自动合并并生成 RouterPath 源文件
 */
task makeRouterPath() {
    def baseDir = rootProject.ext.baseDir
    doLast {
        File routerPathFolder = new File(rootDir.absolutePath + "\\" + baseDir + "\\src\\main\\java\\com\\johan\\router")
        if (!routerPathFolder.exists()) {
            routerPathFolder.mkdirs()
        }
        File routerPathFile = new File(rootDir.absolutePath + "\\" + baseDir + "\\src\\main\\java\\com\\johan\\router\\RouterPath.java")
        if (routerPathFile.exists()) {
            routerPathFile.delete()
        }
        routerPathFile.createNewFile()
        StringBuilder builder = new StringBuilder()
        builder.append("package com.johan.router;").append("\n\n")
        builder.append("public class RouterPath {").append("\n\n")
        ConfigurableFileTree rootFileTree = fileTree(rootDir)
        rootFileTree.include("**/AppRouterPath.java")
        rootFileTree.each { routerFile ->
            List<String> lines = routerFile.readLines()
            lines.each { line ->
                if (line.trim().startsWith("public static final String") && !builder.contains(line)) {
                    builder.append(line).append("\n")
                }
            }
        }
        builder.append("\n").append("}")
        routerPathFile.write(builder.toString())
        println "======== makeRouterPath task executed ========"
    }
}

/**
 * 扫描所有 AppRouterField 文件【 AppRouterField 源文件由 router 编译时注解自动生成】
 * 自动合并并生成 RouterField 源文件
 */
task makeRouterField() {
    def baseDir = rootProject.ext.baseDir
    doLast {
        File routerPathFolder = new File(rootDir.absolutePath + "\\" + baseDir + "\\src\\main\\java\\com\\johan\\router")
        if (!routerPathFolder.exists()) {
            routerPathFolder.mkdirs()
        }
        File routerPathFile = new File(rootDir.absolutePath + "\\" + baseDir + "\\src\\main\\java\\com\\johan\\router\\RouterField.java")
        if (routerPathFile.exists()) {
            routerPathFile.delete()
        }
        routerPathFile.createNewFile()
        StringBuilder builder = new StringBuilder()
        builder.append("package com.johan.router;").append("\n\n")
        builder.append("public class RouterField {").append("\n\n")
        ConfigurableFileTree rootFileTree = fileTree(rootDir)
        rootFileTree.include("**/AppRouterField.java")
        rootFileTree.each { routerFile ->
            List<String> lines = routerFile.readLines()
            lines.each { line ->
                if (line.trim().startsWith("public static final String") && !builder.contains(line)) {
                    builder.append(line).append("\n")
                }
            }
        }
        builder.append("\n").append("}")
        routerPathFile.write(builder.toString())
        println "======== makeRouterField task executed ========"
    }
}

gradle.buildFinished {
    makeRouterPath.execute()
    makeRouterField.execute()
}